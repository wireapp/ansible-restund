# This 'stream' configuration file terminates TLS and forwards the plain TCP stream to the restund process.

upstream restund {
    least_conn;
    zone backend 64k;
    server {{ hostvars[inventory_hostname]['ansible_' + restund_network_interface].ipv4.address }}:{{ restund_tcp_listen_port }} weight=1 max_fails=1 fail_timeout=10s;
}

# see also https://docs.nginx.com/nginx/admin-guide/security-controls/terminating-ssl-tcp/
server {
    listen {{ restund_tls_listen_port }} ssl;
    proxy_pass restund;
    proxy_timeout 3s;
    proxy_connect_timeout 1s;
    proxy_protocol off;
    ssl_certificate /etc/letsencrypt/live/{{ certbot_domain }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ certbot_domain }}/privkey.pem;

    # This currently defaults to whatever the nginx default ciphers are.
    # Looking at: http://nginx.org/en/docs/stream/ngx_stream_ssl_module.html
    # Default: ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    # Default: ssl_ciphers HIGH:!aNULL:!MD5;

    # Context: The restund usecase is one of allowing calls to work in
    # restricted networking setups, where UDP traffic is blocked and plain TCP
    # traffic may also be blocked. We don't rely on the transport encryption of
    # TLS, since the content is already end-to-end encrypted, and most calls
    # should go through UDP or plain TCP anyway.
    # Using TLS is a fallback mode only.
}
