- name: ensuring that ufw is installed
  apt:
    state: present
    name:
      - ufw

- name: reading default local port range
  shell:
    cmd: "cat /proc/sys/net/ipv4/ip_local_port_range | tr '\t' '\n'"
  register: local_port_range_list

- name: activating ingress
  ufw:
    policy: deny
    direction: incoming
    state: enabled
    logging: off

- name: activating egress
  ufw:
    policy: allow
    direction: outgoing
    state: enabled
    logging: off


- name: allowing ingress TCP ports
  ufw:
    rule: allow
    proto: tcp
    direction: in
    to_port: "{{ item }}"
    state: reloaded
  loop: >-
    {{
      [
        '22',
        '80',
        restund_tcp_listen_port | string,
        restund_http_status_port | string,
        restund_metrics_listen_port | string
      ]
      + ([ restund_tls_listen_port ] if (restund_tls_certificate is defined or certbot_enabled) else [])
      + ([ local_port_range_list.stdout_lines | join(':') ] if local_port_range_list | length > 0 else [])
    }}

- name: allowing ingress UDP ports
  ufw:
    rule: allow
    proto: udp
    direction: in
    to_port: "{{ item }}"
    state: reloaded
  loop: >-
    {{
      [
        restund_udp_listen_port | string,
        restund_udp_status_port | string
      ]
      + ([ local_port_range_list.stdout_lines | join(':') ] if local_port_range_list | length > 0 else [])
      + ([ local_port_range_list.stdout_lines | join(':') ] if local_port_range_list | length > 0 else [])
    }}


- name: allowing/overriding egress to provided private IPv4/IPv6 network ranges
  ufw:
    rule: allow
    direction: out
    to_ip: "{{ item }}"
    state: reloaded
  loop: "{{ restund_allowed_private_network_cidrs }}"

- name: reading IPv6 configuration status
  slurp:
    src: '/sys/module/ipv6/parameters/disable'
  register: 'restund_sys_module_ipv6_disable'
  # NOTE: incorporate the case of a non-existing src while not appearing as failed task, and
  #       default to *disabled* (see local variable 'base64_1')
  failed_when: false

- name: blocking egress to pe-defined private IPv4/IPv6 network ranges
  ufw:
    rule: deny
    direction: out
    to_ip: "{{ item }}"
    state: reloaded
  vars:
    base64_1: 'MQo='
    ipv6_is_disabled: >-
      {{ restund_sys_module_ipv6_disable.content | default(base64_1) | b64decode | trim | bool }}
  # NOTE: in cases where user-defined list contains the exact same CIDR/IP, this last task would
  #       overwrite allow rules set in previous tasks. This filter makes sure, that there is not
  #       more than one rule for one CIDR/IP
  loop: >-
    {{
      (
          restund_blocked_ipv4_network_ranges
        + ([] if ipv6_is_disabled else restund_blocked_ipv6_network_ranges)
      )
      | difference(restund_allowed_private_network_cidrs)
    }}
